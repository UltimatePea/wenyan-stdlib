#!/usr/bin/env python3
"""
Wenyan JavaScript Post-Processor
Author: Whisky, PR Worker

Fixes common issues in JavaScript generated by Wenyan v0.3.4:
1. Empty console.log() calls
2. Missing quotes in string assignments
3. Missing arguments to console.log
4. Variable scope issues

Usage: python3 fix_wenyan_js.py input.js output.js
"""

import sys
import re
import json

def fix_console_log_calls(js_content):
    """
    Fix empty console.log() calls by analyzing the context
    """
    # Pattern to find variables that should be logged
    # Look for patterns like: 書之「variable」 -> console.log();
    
    # For now, let's add basic debugging to console.log calls
    # Replace empty console.log() with console.log("DEBUG: output called")
    js_content = re.sub(r'console\.log\(\);', 'console.log("DEBUG: Wenyan output");', js_content)
    
    return js_content

def fix_string_assignments(js_content):
    """
    Fix string assignments that are missing quotes
    """
    # Pattern: variable=Hello World; -> variable="Hello World";
    js_content = re.sub(r'([a-zA-Z_\u4e00-\u9fff][a-zA-Z0-9_\u4e00-\u9fff]*)=([A-Za-z][A-Za-z0-9\s]*);', 
                       r'\1="\2";', js_content)
    
    return js_content

def fix_variable_declarations(js_content):
    """
    Fix variable redeclaration issues
    """
    # Track declared variables to avoid redeclaration
    declared_vars = set()
    lines = js_content.split(';')
    fixed_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # Check for var declarations
        var_match = re.match(r'var\s+([a-zA-Z_\u4e00-\u9fff][a-zA-Z0-9_\u4e00-\u9fff]*)', line)
        if var_match:
            var_name = var_match.group(1)
            if var_name in declared_vars:
                # Skip redeclaration, just do assignment
                assignment_match = re.match(r'var\s+([^=]+)=(.+)', line)
                if assignment_match:
                    line = f"{assignment_match.group(1)}={assignment_match.group(2)}"
            else:
                declared_vars.add(var_name)
        
        fixed_lines.append(line)
    
    return ';'.join(fixed_lines)

def fix_function_calls(js_content):
    """
    Fix issues with function calls and returns
    """
    # Add return statement debugging
    js_content = re.sub(r'return ([^;]+);', r'return \1;', js_content)
    
    return js_content

def process_wenyan_javascript(input_js):
    """
    Main processing function to fix all known issues
    """
    print(f"Processing JavaScript generated by Wenyan...")
    
    # Apply all fixes
    fixed_js = input_js
    fixed_js = fix_console_log_calls(fixed_js)
    fixed_js = fix_string_assignments(fixed_js)
    fixed_js = fix_variable_declarations(fixed_js)
    fixed_js = fix_function_calls(fixed_js)
    
    # Clean up formatting
    fixed_js = re.sub(r';\s*;', ';', fixed_js)  # Remove double semicolons
    fixed_js = re.sub(r'^\s*;', '', fixed_js, flags=re.MULTILINE)  # Remove leading semicolons
    
    return fixed_js

def main():
    if len(sys.argv) != 3:
        print("Usage: python3 fix_wenyan_js.py input.js output.js")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            input_js = f.read()
        
        fixed_js = process_wenyan_javascript(input_js)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(fixed_js)
        
        print(f"✓ JavaScript fixed and saved to {output_file}")
        print(f"Original size: {len(input_js)} chars")
        print(f"Fixed size: {len(fixed_js)} chars")
        
    except Exception as e:
        print(f"Error processing file: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()