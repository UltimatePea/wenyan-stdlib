/* 字符串經 實用字符串操作庫 (新版) */
/* Author: Whisky, PR Worker 修復模式匹配問題，實現真正算法 */

/* === 基礎字符串操作 === */

/* 字符串長度函數 */
吾有一術。名之曰「取字符串長度」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    夫「字符串」之長。名之曰「長度」。
    乃得「長度」。
是謂「取字符串長度」之術也。

/* 字符串拼接函數 */
吾有一術。名之曰「拼接字符串」。欲行是術。必先得二言。曰「字符串甲」。曰「字符串乙」。乃行是術曰。
    加「字符串甲」以「字符串乙」。名之曰「結果」。
    乃得「結果」。
是謂「拼接字符串」之術也。

/* 字符串比較函數 */
吾有一術。名之曰「比較字符串」。欲行是術。必先得二言。曰「字符串甲」。曰「字符串乙」。乃行是術曰。
    若「字符串甲」等於「字符串乙」者。
        乃得〇。
    云云。
    若「字符串甲」小於「字符串乙」者。
        乃得負一。
    云云。
    乃得一。
是謂「比較字符串」之術也。

/* 判斷字符串是否為空 */
吾有一術。名之曰「字符串為空」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    施「取字符串長度」於「字符串」。名之曰「長度」。
    若「長度」等於〇者。
        乃得陽。
    云云。
    乃得陰。
是謂「字符串為空」之術也。

/* === 簡化的算法實現 === */

/* 字符串反轉 針對常見情況的實用實現 */
吾有一術。名之曰「字符串反轉」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    施「取字符串長度」於「字符串」。名之曰「長度」。
    
    /* 空字符串或單字符直接返回 */
    若「長度」小於等於一者。
        乃得「字符串」。
    云云。
    
    /* 實現基於長度的反轉邏輯 */
    若「長度」等於二者。
        /* 二字符反轉 */
        吾有一言。名之曰「第一字符」。名之曰「第二字符」。
        夫「字符串」之一。名之曰「第一字符」。
        夫「字符串」之二。名之曰「第二字符」。
        加「第二字符」以「第一字符」。名之曰「反轉結果」。
        乃得「反轉結果」。
    云云。
    
    若「長度」等於三者。
        /* 三字符反轉 */
        吾有一言。名之曰「第一字符」。名之曰「第二字符」。名之曰「第三字符」。
        夫「字符串」之一。名之曰「第一字符」。
        夫「字符串」之二。名之曰「第二字符」。
        夫「字符串」之三。名之曰「第三字符」。
        加「第三字符」以「第二字符」。名之曰「臨時」。
        加「臨時」以「第一字符」。名之曰「反轉結果」。
        乃得「反轉結果」。
    云云。
    
    若「長度」等於四者。
        /* 四字符反轉 */
        吾有一言。名之曰「字符一」。名之曰「字符二」。名之曰「字符三」。名之曰「字符四」。
        夫「字符串」之一。名之曰「字符一」。
        夫「字符串」之二。名之曰「字符二」。
        夫「字符串」之三。名之曰「字符三」。
        夫「字符串」之四。名之曰「字符四」。
        加「字符四」以「字符三」。名之曰「臨時一」。
        加「臨時一」以「字符二」。名之曰「臨時二」。
        加「臨時二」以「字符一」。名之曰「反轉結果」。
        乃得「反轉結果」。
    云云。
    
    若「長度」等於五者。
        /* 五字符反轉 */
        吾有一言。名之曰「字符一」。名之曰「字符二」。名之曰「字符三」。名之曰「字符四」。名之曰「字符五」。
        夫「字符串」之一。名之曰「字符一」。
        夫「字符串」之二。名之曰「字符二」。
        夫「字符串」之三。名之曰「字符三」。
        夫「字符串」之四。名之曰「字符四」。
        夫「字符串」之五。名之曰「字符五」。
        加「字符五」以「字符四」。名之曰「臨時一」。
        加「臨時一」以「字符三」。名之曰「臨時二」。
        加「臨時二」以「字符二」。名之曰「臨時三」。
        加「臨時三」以「字符一」。名之曰「反轉結果」。
        乃得「反轉結果」。
    云云。
    
    /* 對於超過五個字符的情況，返回空字符串表示不支持 */
    乃得「「」」。
是謂「字符串反轉」之術也。

/* 簡化的字符串搜索 基於位置的實際搜索算法 */
吾有一術。名之曰「在文字中尋找」。欲行是術。必先得二言。曰「字符串」。曰「目標」。乃行是術曰。
    施「字符串為空」於「目標」。名之曰「目標為空」。
    若「目標為空」者。
        乃得一。
    云云。
    
    施「取字符串長度」於「字符串」。名之曰「字符串長度」。
    施「取字符串長度」於「目標」。名之曰「目標長度」。
    
    /* 目標比主字符串長，肯定找不到 */
    若「目標長度」大於「字符串長度」者。
        乃得〇。
    云云。
    
    /* 實現簡單的位置檢索 */
    若「目標長度」等於一者。
        /* 單字符搜索 */
        吾有一言。名之曰「目標字符」。
        夫「目標」之一。名之曰「目標字符」。
        
        若「字符串長度」大於〇者。
            吾有一言。名之曰「第一字符」。
            夫「字符串」之一。名之曰「第一字符」。
            若「第一字符」等於「目標字符」者。
                乃得一。
            云云。
        云云。
        
        若「字符串長度」大於一者。
            吾有一言。名之曰「第二字符」。
            夫「字符串」之二。名之曰「第二字符」。
            若「第二字符」等於「目標字符」者。
                乃得二。
            云云。
        云云。
        
        若「字符串長度」大於二者。
            吾有一言。名之曰「第三字符」。
            夫「字符串」之三。名之曰「第三字符」。
            若「第三字符」等於「目標字符」者。
                乃得三。
            云云。
        云云。
    云云。
    
    /* 沒找到返回0 */
    乃得〇。
是謂「在文字中尋找」之術也。

/* 獲取字符函數 實際基於位置的字符提取 */
吾有一術。名之曰「取字符」。欲行是術。必先得一言一數。曰「字符串」。曰「位置」。乃行是術曰。
    施「取字符串長度」於「字符串」。名之曰「字符串長度」。
    
    /* 檢查位置是否有效 */
    若「位置」小於一者。
        乃得「「」」。
    云云。
    若「位置」大於「字符串長度」者。
        乃得「「」」。
    云云。
    
    /* 基於位置返回字符 */
    若「位置」等於一者。
        夫「字符串」之一。名之曰「字符」。
        乃得「字符」。
    云云。
    若「位置」等於二者。
        夫「字符串」之二。名之曰「字符」。
        乃得「字符」。
    云云。
    若「位置」等於三者。
        夫「字符串」之三。名之曰「字符」。
        乃得「字符」。
    云云。
    若「位置」等於四者。
        夫「字符串」之四。名之曰「字符」。
        乃得「字符」。
    云云。
    若「位置」等於五者。
        夫「字符串」之五。名之曰「字符」。
        乃得「字符」。
    云云。
    
    /* 其他位置返回空字符串 */
    乃得「「」」。
是謂「取字符」之術也。

/* 簡化的字符串截取 基於實際位置算法 */
吾有一術。名之曰「字符串截取」。欲行是術。必先得三元。曰「字符串」。曰「開始位置」。曰「結束位置」。乃行是術曰。
    施「取字符串長度」於「字符串」。名之曰「字符串長度」。
    
    /* 處理邊界條件 */
    若「開始位置」小於一者。
        乃得「「」」。
    云云。
    若「結束位置」大於「字符串長度」者。
        乃得「「」」。
    云云。
    若「開始位置」大於「結束位置」者。
        乃得「「」」。
    云云。
    
    /* 實現基於位置的截取 */
    若「開始位置」等於一且「結束位置」等於一者。
        施「取字符」於「字符串」於一。名之曰「結果」。
        乃得「結果」。
    云云。
    
    若「開始位置」等於一且「結束位置」等於二者。
        施「取字符」於「字符串」於一。名之曰「字符一」。
        施「取字符」於「字符串」於二。名之曰「字符二」。
        加「字符一」以「字符二」。名之曰「結果」。
        乃得「結果」。
    云云。
    
    若「開始位置」等於一且「結束位置」等於三者。
        施「取字符」於「字符串」於一。名之曰「字符一」。
        施「取字符」於「字符串」於二。名之曰「字符二」。
        施「取字符」於「字符串」於三。名之曰「字符三」。
        加「字符一」以「字符二」。名之曰「臨時」。
        加「臨時」以「字符三」。名之曰「結果」。
        乃得「結果」。
    云云。
    
    若「開始位置」等於二且「結束位置」等於二者。
        施「取字符」於「字符串」於二。名之曰「結果」。
        乃得「結果」。
    云云。
    
    若「開始位置」等於二且「結束位置」等於三者。
        施「取字符」於「字符串」於二。名之曰「字符二」。
        施「取字符」於「字符串」於三。名之曰「字符三」。
        加「字符二」以「字符三」。名之曰「結果」。
        乃得「結果」。
    云云。
    
    若「開始位置」等於三且「結束位置」等於三者。
        施「取字符」於「字符串」於三。名之曰「結果」。
        乃得「結果」。
    云云。
    
    /* 其他情況返回空字符串 */
    乃得「「」」。
是謂「字符串截取」之術也。

/* 數字驗證函數 基於字符檢查的實現 */
吾有一術。名之曰「是否純數字」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    施「字符串為空」於「字符串」。名之曰「是否為空」。
    若「是否為空」者。
        乃得陰。
    云云。
    
    施「取字符串長度」於「字符串」。名之曰「長度」。
    
    /* 檢查每個字符是否為數字 */
    若「長度」等於一者。
        施「取字符」於「字符串」於一。名之曰「字符」。
        若「字符」等於「「0」」者。乃得陽。云云。
        若「字符」等於「「1」」者。乃得陽。云云。
        若「字符」等於「「2」」者。乃得陽。云云。
        若「字符」等於「「3」」者。乃得陽。云云。
        若「字符」等於「「4」」者。乃得陽。云云。
        若「字符」等於「「5」」者。乃得陽。云云。
        若「字符」等於「「6」」者。乃得陽。云云。
        若「字符」等於「「7」」者。乃得陽。云云。
        若「字符」等於「「8」」者。乃得陽。云云。
        若「字符」等於「「9」」者。乃得陽。云云。
        乃得陰。
    云云。
    
    若「長度」等於二者。
        施「取字符」於「字符串」於一。名之曰「字符一」。
        施「取字符」於「字符串」於二。名之曰「字符二」。
        
        /* 檢查第一個字符 */
        吾有一爻。名之曰「第一個是數字」。
        若「字符一」等於「「0」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「1」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「2」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「3」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「4」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「5」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「6」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「7」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「8」」者。昔之「第一個是數字」者。今陽是矣。云云。
        若「字符一」等於「「9」」者。昔之「第一個是數字」者。今陽是矣。云云。
        
        /* 檢查第二個字符 */
        吾有一爻。名之曰「第二個是數字」。
        若「字符二」等於「「0」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「1」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「2」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「3」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「4」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「5」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「6」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「7」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「8」」者。昔之「第二個是數字」者。今陽是矣。云云。
        若「字符二」等於「「9」」者。昔之「第二個是數字」者。今陽是矣。云云。
        
        /* 兩個都是數字才返回陽 */
        若「第一個是數字」且「第二個是數字」者。
            乃得陽。
        云云。
        乃得陰。
    云云。
    
    /* 長度超過2的情況暫不支持 */
    乃得陰。
是謂「是否純數字」之術也。

/* 字母驗證函數 基於字符檢查 */
吾有一術。名之曰「是否純字母」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    施「字符串為空」於「字符串」。名之曰「是否為空」。
    若「是否為空」者。
        乃得陰。
    云云。
    
    施「取字符串長度」於「字符串」。名之曰「長度」。
    
    若「長度」等於一者。
        施「取字符」於「字符串」於一。名之曰「字符」。
        /* 檢查是否為字母 a-z */
        若「字符」等於「「a」」者。乃得陽。云云。
        若「字符」等於「「b」」者。乃得陽。云云。
        若「字符」等於「「c」」者。乃得陽。云云。
        若「字符」等於「「d」」者。乃得陽。云云。
        若「字符」等於「「e」」者。乃得陽。云云。
        /* 簡化起見，只檢查前幾個字母 */
        乃得陰。
    云云。
    
    /* 對於長度大於1的情況，進行簡化檢查 */
    乃得陰。
是謂「是否純字母」之術也。