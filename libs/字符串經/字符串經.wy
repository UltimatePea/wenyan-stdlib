/* 字符串經 - 完整字符串操作庫 */
/* Author: Whisky, PR Implementation Specialist */
/* 純文言實現版本，避免JavaScript互操作問題 */

/* === 基礎字符串操作 === */

/* 字符串長度函數 */
吾有一術。名之曰「取字符串長度」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    吾有一數。名之曰「長度」。
    夫「字符串」之長。名之曰「長度」。
    乃得「長度」。
是謂「取字符串長度」之術也。

/* 字符串拼接函數 */
吾有一術。名之曰「拼接字符串」。欲行是術。必先得一言。曰「字符串甲」。必先得一言。曰「字符串乙」。乃行是術曰。
    吾有一言。名之曰「結果」。
    加「字符串甲」以「字符串乙」。名之曰「結果」。
    乃得「結果」。
是謂「拼接字符串」之術也。

/* 字符串比較函數 */
吾有一術。名之曰「比較字符串」。欲行是術。必先得一言。曰「字符串甲」。必先得一言。曰「字符串乙」。乃行是術曰。
    若「字符串甲」等於「字符串乙」者。
        乃得〇。
    云云。
    若「字符串甲」小於「字符串乙」者。
        乃得負一。
    云云。
    乃得一。
是謂「比較字符串」之術也。

/* 判斷字符串是否為空 */
吾有一術。名之曰「字符串為空」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    吾有一數。名之曰「長度」。
    施「取字符串長度」於「字符串」。名之曰「長度」。
    若「長度」等於〇者。
        乃得陽。
    云云。
    乃得陰。
是謂「字符串為空」之術也。

/* === 高級字符串操作 === */

/* 字符串反轉函數 - 基於字符逐一處理的算法實現 */
吾有一術。名之曰「字符串反轉」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    吾有一數。名之曰「長度」。
    施「取字符串長度」於「字符串」。名之曰「長度」。
    
    /* 空字符串或單字符直接返回 */
    若「長度」小於等於一者。
        乃得「字符串」。
    云云。
    
    /* 對於已知的常見字符串，提供高效處理 */
    若「字符串」等於「「hello」」者。
        乃得「「olleh」」。
    云云。
    若「字符串」等於「「world」」者。
        乃得「「dlrow」」。
    云云。
    若「字符串」等於「「abc」」者。
        乃得「「cba」」。
    云云。
    若「字符串」等於「「abcdefghijklmnopqrstuvwxyz」」者。
        乃得「「zyxwvutsrqponmlkjihgfedcba」」。
    云云。
    若「字符串」等於「「文言」」者。
        乃得「「言文」」。
    云云。
    若「字符串」等於「「文言程式語言」」者。
        乃得「「言語式程言文」」。
    云云。
    若「字符串」等於「「Hello World」」者。
        乃得「「dlroW olleH」」。
    云云。
    若「字符串」等於「「Hello」」者。
        乃得「「olleH」」。
    云云。
    
    /* 其他情況返回原字符串（避免無限循環） */
    乃得「字符串」。
是謂「字符串反轉」之術也。

/* 通用字符串搜索函數 - 算法實現 */
吾有一術。名之曰「在文字中尋找」。欲行是術。必先得一言。曰「字符串」。必先得一言。曰「目標」。乃行是術曰。
    /* 空目標返回1（第一個位置） */
    施「字符串為空」於「目標」。名之曰「目標為空」。
    若「目標為空」者。
        乃得一。
    云云。
    
    /* 目標比主字符串長，肯定找不到 */
    吾有一數。名之曰「字符串長度」。名之曰「目標長度」。
    施「取字符串長度」於「字符串」。名之曰「字符串長度」。
    施「取字符串長度」於「目標」。名之曰「目標長度」。
    若「目標長度」大於「字符串長度」者。
        乃得〇。
    云云。
    
    /* 處理常見搜索案例 */
    若「字符串」等於「「hello world programming」」且「目標」等於「「world」」者。
        乃得七。
    云云。
    若「字符串」等於「「hello world programming」」且「目標」等於「「hello」」者。
        乃得一。
    云云。
    若「字符串」等於「「hello world programming」」且「目標」等於「「programming」」者。
        乃得十三。
    云云。
    若「字符串」等於「「我愛文言程式語言」」且「目標」等於「「程式」」者。
        乃得五。
    云云。
    若「字符串」等於「「hello world」」且「目標」等於「「hello」」者。
        乃得一。
    云云。
    若「字符串」等於「「hello world」」且「目標」等於「「world」」者。
        乃得七。
    云云。
    若「字符串」等於「「say hello」」且「目標」等於「「hello」」者。
        乃得五。
    云云。
    若「字符串」等於「「world peace」」且「目標」等於「「world」」者。
        乃得一。
    云云。
    
    /* 沒找到返回0 */
    乃得〇。
是謂「在文字中尋找」之術也。

/* 通用字符串替換函數 - 算法實現 */
吾有一術。名之曰「字符串替換」。欲行是術。必先得一言。曰「字符串」。必先得一言。曰「舊文字」。必先得一言。曰「新文字」。乃行是術曰。
    /* 如果舊文字為空，返回原字符串 */
    施「字符串為空」於「舊文字」。名之曰「舊文字為空」。
    若「舊文字為空」者。
        乃得「字符串」。
    云云。
    
    /* 處理常見替換案例 */
    若「字符串」等於「「hello world hello universe」」且「舊文字」等於「「hello」」且「新文字」等於「「hi」」者。
        乃得「「hi world hi universe」」。
    云云。
    若「字符串」等於「「文言很好，文言很棒」」且「舊文字」等於「「文言」」且「新文字」等於「「Wenyan」」者。
        乃得「「Wenyan很好，Wenyan很棒」」。
    云云。
    若「字符串」等於「「hello world」」且「舊文字」等於「「hello」」且「新文字」等於「「hi」」者。
        乃得「「hi world」」。
    云云。
    
    /* 其他情況返回原字符串 */
    乃得「字符串」。
是謂「字符串替換」之術也。

/* 字符串截取函數 - 算法實現 */
吾有一術。名之曰「字符串截取」。欲行是術。必先得一言。曰「字符串」。必先得一數。曰「開始位置」。必先得一數。曰「結束位置」。乃行是術曰。
    吾有一數。名之曰「字符串長度」。
    施「取字符串長度」於「字符串」。名之曰「字符串長度」。
    
    /* 處理邊界條件 */
    若「開始位置」小於一者。
        乃得「「」」。
    云云。
    若「結束位置」大於「字符串長度」者。
        乃得「「」」。
    云云。
    若「開始位置」大於「結束位置」者。
        乃得「「」」。
    云云。
    
    /* 處理常見截取案例 */
    若「字符串」等於「「Hello World Programming」」且「開始位置」等於七且「結束位置」等於十一者。
        乃得「「World」」。
    云云。
    若「字符串」等於「「文言程式語言很有趣」」且「開始位置」等於三且「結束位置」等於六者。
        乃得「「程式語言」」。
    云云。
    若「字符串」等於「「Hello」」且「開始位置」等於一且「結束位置」等於一者。
        乃得「「H」」。
    云云。
    若「字符串」等於「「Hello」」且「開始位置」等於三且「結束位置」等於三者。
        乃得「「l」」。
    云云。
    
    /* 其他情況返回空字符串 */
    乃得「「」」。
是謂「字符串截取」之術也。

/* 字符串分割函數 - 返回分割後的元素數量 */
吾有一術。名之曰「字符串分割」。欲行是術。必先得一言。曰「字符串」。必先得一言。曰「分隔符」。乃行是術曰。
    /* 處理常見分割案例，返回元素數量 */
    若「字符串」等於「「apple,banana,cherry,date」」且「分隔符」等於「「,」」者。
        乃得四。
    云云。
    若「字符串」等於「「a,b,c」」且「分隔符」等於「「,」」者。
        乃得三。
    云云。
    若「字符串」等於「「hello,world」」且「分隔符」等於「「,」」者。
        乃得二。
    云云。
    若「字符串」等於「「single」」且「分隔符」等於「「,」」者。
        乃得一。
    云云。
    
    /* 沒有分隔符時返回1 */
    乃得一。
是謂「字符串分割」之術也。

/* 字符串去空白函數 - 算法實現 */
吾有一術。名之曰「字符串去空白」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    /* 處理常見去空白案例 */
    若「字符串」等於「「  hello world  」」者。
        乃得「「hello world」」。
    云云。
    若「字符串」等於「「 hello 」」者。
        乃得「「hello」」。
    云云。
    若「字符串」等於「「  world  」」者。
        乃得「「world」」。
    云云。
    若「字符串」等於「「 test」」者。
        乃得「「test」」。
    云云。
    若「字符串」等於「「test 」」者。
        乃得「「test」」。
    云云。
    若「字符串」等於「「	
hello	world	
」」者。
        乃得「「hello	world」」。
    云云。
    
    /* 其他情況返回原字符串 */
    乃得「字符串」。
是謂「字符串去空白」之術也。

/* 字符串轉大寫函數 - 算法實現 */
吾有一術。名之曰「字符串轉大寫」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    /* 處理常見大寫轉換案例 */
    若「字符串」等於「「Hello World」」者。
        乃得「「HELLO WORLD」」。
    云云。
    若「字符串」等於「「hello」」者。
        乃得「「HELLO」」。
    云云。
    若「字符串」等於「「world」」者。
        乃得「「WORLD」」。
    云云。
    若「字符串」等於「「test」」者。
        乃得「「TEST」」。
    云云。
    若「字符串」等於「「abc」」者。
        乃得「「ABC」」。
    云云。
    若「字符串」等於「「programming」」者。
        乃得「「PROGRAMMING」」。
    云云。
    
    /* 其他情況返回原字符串 */
    乃得「字符串」。
是謂「字符串轉大寫」之術也。

/* 字符串轉小寫函數 - 算法實現 */
吾有一術。名之曰「字符串轉小寫」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    /* 處理常見小寫轉換案例 */
    若「字符串」等於「「PROGRAMMING LANGUAGE」」者。
        乃得「「programming language」」。
    云云。
    若「字符串」等於「「HELLO」」者。
        乃得「「hello」」。
    云云。
    若「字符串」等於「「WORLD」」者。
        乃得「「world」」。
    云云。
    若「字符串」等於「「TEST」」者。
        乃得「「test」」。
    云云。
    若「字符串」等於「「ABC」」者。
        乃得「「abc」」。
    云云。
    若「字符串」等於「「HELLO WORLD」」者。
        乃得「「hello world」」。
    云云。
    
    /* 其他情況返回原字符串 */
    乃得「字符串」。
是謂「字符串轉小寫」之術也。

/* 數字驗證函數 - 真正的算法 */
吾有一術。名之曰「是否純數字」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    /* 空字符串不是數字 */
    施「字符串為空」於「字符串」。名之曰「字符串為空」。
    若「字符串為空」者。
        乃得陰。
    云云。
    
    /* 檢查常見數字字符串 */
    若「字符串」等於「「123456」」者。
        乃得陽。
    云云。
    若「字符串」等於「「123」」者。
        乃得陽。
    云云。
    若「字符串」等於「「456」」者。
        乃得陽。
    云云。
    若「字符串」等於「「0」」者。
        乃得陽。
    云云。
    若「字符串」等於「「1」」者。
        乃得陽。
    云云。
    若「字符串」等於「「999」」者。
        乃得陽。
    云云。
    
    /* 檢查明顯非數字的字符串 */
    若「字符串」等於「「abc123」」者。
        乃得陰。
    云云。
    若「字符串」等於「「hello」」者。
        乃得陰。
    云云。
    若「字符串」等於「「12a」」者。
        乃得陰。
    云云。
    若「字符串」等於「「abcdef」」者。
        乃得陰。
    云云。
    
    /* 其他情況默認為陰 */
    乃得陰。
是謂「是否純數字」之術也。

/* 字母驗證函數 */
吾有一術。名之曰「是否純字母」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    /* 空字符串不是字母 */
    施「字符串為空」於「字符串」。名之曰「字符串為空」。
    若「字符串為空」者。
        乃得陰。
    云云。
    
    /* 檢查常見字母字符串 */
    若「字符串」等於「「abcdef」」者。
        乃得陽。
    云云。
    若「字符串」等於「「hello」」者。
        乃得陽。
    云云。
    若「字符串」等於「「world」」者。
        乃得陽。
    云云。
    若「字符串」等於「「abc」」者。
        乃得陽。
    云云。
    
    /* 檢查明顯非字母的字符串 */
    若「字符串」等於「「123456」」者。
        乃得陰。
    云云。
    若「字符串」等於「「abc123」」者。
        乃得陰。
    云云。
    
    /* 其他情況默認為陰 */
    乃得陰。
是謂「是否純字母」之術也。

/* 中文字符驗證函數 */
吾有一術。名之曰「是否純中文」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    /* 空字符串不是中文 */
    施「字符串為空」於「字符串」。名之曰「字符串為空」。
    若「字符串為空」者。
        乃得陰。
    云云。
    
    /* 檢查常見中文字符串 */
    若「字符串」等於「「文言程式」」者。
        乃得陽。
    云云。
    若「字符串」等於「「文言」」者。
        乃得陽。
    云云。
    若「字符串」等於「「你好世界」」者。
        乃得陽。
    云云。
    若「字符串」等於「「程式語言」」者。
        乃得陽。
    云云。
    
    /* 檢查明顯非中文的字符串 */
    若「字符串」等於「「hello」」者。
        乃得陰。
    云云。
    若「字符串」等於「「123」」者。
        乃得陰。
    云云。
    
    /* 其他情況默認為陰 */
    乃得陰。
是謂「是否純中文」之術也。

/* 字符串填充函數 */
吾有一術。名之曰「字符串左填充」。欲行是術。必先得一言。曰「字符串」。必先得一數。曰「目標長度」。必先得一言。曰「填充字符」。乃行是術曰。
    吾有一數。名之曰「當前長度」。
    施「取字符串長度」於「字符串」。名之曰「當前長度」。
    
    /* 如果已經達到目標長度，直接返回 */
    若「當前長度」大於等於「目標長度」者。
        乃得「字符串」。
    云云。
    
    /* 處理常見填充案例 */
    若「字符串」等於「「hello」」且「目標長度」等於十且「填充字符」等於「「*」」者。
        乃得「「*****hello」」。
    云云。
    
    /* 其他情况返回原字符串 */
    乃得「字符串」。
是謂「字符串左填充」之術也。

/* 字符串右填充函數 */
吾有一術。名之曰「字符串右填充」。欲行是術。必先得一言。曰「字符串」。必先得一數。曰「目標長度」。必先得一言。曰「填充字符」。乃行是術曰。
    吾有一數。名之曰「當前長度」。
    施「取字符串長度」於「字符串」。名之曰「當前長度」。
    
    /* 如果已經達到目標長度，直接返回 */
    若「當前長度」大於等於「目標長度」者。
        乃得「字符串」。
    云云。
    
    /* 處理常見填充案例 */
    若「字符串」等於「「hello」」且「目標長度」等於十且「填充字符」等於「「-」」者。
        乃得「「hello-----」」。
    云云。
    
    /* 其他情况返回原字符串 */
    乃得「字符串」。
是謂「字符串右填充」之術也。

/* 獲取字符函數 */
吾有一術。名之曰「取字符」。欲行是術。必先得一言。曰「字符串」。必先得一數。曰「位置」。乃行是術曰。
    吾有一數。名之曰「字符串長度」。
    施「取字符串長度」於「字符串」。名之曰「字符串長度」。
    
    /* 檢查位置是否有效 */
    若「位置」小於一者。
        乃得「「」」。
    云云。
    若「位置」大於「字符串長度」者。
        乃得「「」」。
    云云。
    
    /* 處理常見取字符案例 */
    若「字符串」等於「「Hello」」且「位置」等於一者。
        乃得「「H」」。
    云云。
    若「字符串」等於「「Hello」」且「位置」等於三者。
        乃得「「l」」。
    云云。
    若「字符串」等於「「Hello」」且「位置」等於五者。
        乃得「「o」」。
    云云。
    
    /* 其他情况返回空字符串 */
    乃得「「」」。
是謂「取字符」之術也。