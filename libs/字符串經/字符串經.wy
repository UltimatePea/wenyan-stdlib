/* 字符串經 - Wenyan String Library Core Operations */
/* 實現字符串的基礎操作功能 */
/* Author: Whisky, PR Worker */

/* === 基礎字符串操作 === */

/* 字符串長度函數 - 返回字符串的字符數 */
吾有一術。名之曰「取字符串長度」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    吾有一數。名之曰「長度」。
    夫「字符串」之長。名之曰「長度」。
    乃得「長度」。
是謂「取字符串長度」之術也。

/* 字符串拼接函數 - 連接兩個字符串 */
吾有一術。名之曰「拼接字符串」。欲行是術。必先得二言。曰「字符串甲」。曰「字符串乙」。乃行是術曰。
    吾有一言。名之曰「結果」。
    加「字符串甲」以「字符串乙」。名之曰「結果」。
    乃得「結果」。
是謂「拼接字符串」之術也。

/* 字符串截取函數 - 從指定位置截取子字符串 */
吾有一術。名之曰「截取字符串」。欲行是術。必先得一言、二數。曰「字符串」。曰「起始位置」。曰「截取長度」。乃行是術曰。
    吾有一言。名之曰「結果」。
    /* 使用wenyan內建的字符串截取功能 */
    夫「字符串」自「起始位置」。截「截取長度」。名之曰「結果」。
    乃得「結果」。
是謂「截取字符串」之術也。

/* === 字符串查找功能 === */

/* 查找子字符串位置 - 返回子字符串第一次出現的位置 */
吾有一術。名之曰「查找字符串位置」。欲行是術。必先得二言。曰「主字符串」。曰「子字符串」。乃行是術曰。
    吾有一數。名之曰「位置」。
    吾有一數。名之曰「主長度」。
    吾有一數。名之曰「子長度」。
    
    /* 獲取字符串長度 */
    施「取字符串長度」於「主字符串」。名之曰「主長度」。
    施「取字符串長度」於「子字符串」。名之曰「子長度」。
    
    /* 如果子字符串長度大於主字符串，直接返回-1 */
    若「子長度」大於「主長度」者。
        乃得負一。
    云云。
    
    /* 遍歷主字符串查找匹配 */
    凡「主長度」。減以「子長度」。加以一。名之曰「限制」。
    恆為是。
        若「位置」等於「限制」者。
            乃得負一。
        云云。
        
        /* 檢查當前位置是否匹配 */
        吾有一言。名之曰「當前子串」。
        施「截取字符串」於「主字符串」、「位置」、「子長度」。名之曰「當前子串」。
        
        若「當前子串」等於「子字符串」者。
            乃得「位置」。
        云云。
        
        加「位置」以一。名之曰「位置」。
    云云。
    
    乃得負一。
是謂「查找字符串位置」之術也。

/* 判斷字符串是否包含子字符串 */
吾有一術。名之曰「字符串包含」。欲行是術。必先得二言。曰「主字符串」。曰「子字符串」。乃行是術曰。
    吾有一數。名之曰「位置」。
    施「查找字符串位置」於「主字符串」、「子字符串」。名之曰「位置」。
    若「位置」不等於負一者。
        乃得陽。
    云云。
    乃得陰。
是謂「字符串包含」之術也。

/* === 字符位置操作 === */

/* 獲取指定位置的字符 */
吾有一術。名之曰「取字符」。欲行是術。必先得一言、一數。曰「字符串」。曰「位置」。乃行是術曰。
    吾有一言。名之曰「字符」。
    施「截取字符串」於「字符串」、「位置」、一。名之曰「字符」。
    乃得「字符」。
是謂「取字符」之術也。

/* 字符串比較函數 */
吾有一術。名之曰「比較字符串」。欲行是術。必先得二言。曰「字符串甲」。曰「字符串乙」。乃行是術曰。
    若「字符串甲」等於「字符串乙」者。
        乃得零。
    云云。
    若「字符串甲」小於「字符串乙」者。
        乃得負一。
    云云。
    乃得一。
是謂「比較字符串」之術也。

/* 判斷字符串是否為空 */
吾有一術。名之曰「字符串為空」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    吾有一數。名之曰「長度」。
    施「取字符串長度」於「字符串」。名之曰「長度」。
    若「長度」等於零者。
        乃得陽。
    云云。
    乃得陰。
是謂「字符串為空」之術也。

/* === 字符串轉換功能 === */

/* 字符串轉大寫（如適用於拉丁字符） */
吾有一術。名之曰「字符串轉大寫」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    /* 對於中文字符，此函數返回原字符串 */
    /* 後續可擴展支持拉丁字符轉換 */
    乃得「字符串」。
是謂「字符串轉大寫」之術也。

/* 字符串轉小寫（如適用於拉丁字符） */
吾有一術。名之曰「字符串轉小寫」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    /* 對於中文字符，此函數返回原字符串 */
    /* 後續可擴展支持拉丁字符轉換 */
    乃得「字符串」。
是謂「字符串轉小寫」之術也。

/* === 實用字符串函數 === */

/* 去除字符串前後空格 */
吾有一術。名之曰「去除前後空格」。欲行是術。必先得一言。曰「字符串」。乃行是術曰。
    吾有一數。名之曰「長度」。
    吾有一數。名之曰「開始」。初之為一。
    吾有一數。名之曰「結束」。
    
    施「取字符串長度」於「字符串」。名之曰「長度」。
    名之曰「結束」。以「長度」。
    
    /* 查找第一個非空格字符 */
    恆為是。
        若「開始」大於「長度」者。云云。
        吾有一言。名之曰「當前字符」。
        施「取字符」於「字符串」、「開始」。名之曰「當前字符」。
        若「當前字符」不等於「 」者。云云。
        加「開始」以一。名之曰「開始」。
    云云。
    
    /* 查找最後一個非空格字符 */
    恆為是。
        若「結束」小於「開始」者。云云。
        吾有一言。名之曰「當前字符」。
        施「取字符」於「字符串」、「結束」。名之曰「當前字符」。
        若「當前字符」不等於「 」者。云云。
        減「結束」以一。名之曰「結束」。
    云云。
    
    /* 如果全是空格，返回空字符串 */
    若「開始」大於「結束」者。
        乃得「」。
    云云。
    
    /* 截取結果 */
    吾有一數。名之曰「截取長度」。
    減「結束」以「開始」。加以一。名之曰「截取長度」。
    
    吾有一言。名之曰「結果」。
    施「截取字符串」於「字符串」、「開始」、「截取長度」。名之曰「結果」。
    乃得「結果」。
是謂「去除前後空格」之術也。

/* 重複字符串指定次數 */
吾有一術。名之曰「重複字符串」。欲行是術。必先得一言、一數。曰「字符串」。曰「次數」。乃行是術曰。
    吾有一言。名之曰「結果」。初之為「」。
    吾有一數。名之曰「計數器」。初之為零。
    
    恆為是。
        若「計數器」等於「次數」者。云云。
        施「拼接字符串」於「結果」、「字符串」。名之曰「結果」。
        加「計數器」以一。名之曰「計數器」。
    云云。
    
    乃得「結果」。
是謂「重複字符串」之術也。