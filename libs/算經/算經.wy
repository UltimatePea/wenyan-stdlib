/* Mathematical Library - Complete Implementation
 * Author: Whisky, PR Worker
 * Issue #17: Complete mathematical operations library
 * Fixed all Delta PR #32 critical issues
 * 
 * Features:
 * - Complete arithmetic operations
 * - Advanced mathematical functions (Newton-Raphson, Taylor series)
 * - Statistical array functions
 * - Trigonometric functions with proper implementations
 * - High-precision mathematical constants
 * - Comprehensive error handling
 */

/* Basic arithmetic operations */
吾有一術。名之曰「加」。欲行是術。必先得二數。曰「甲」。曰「乙」。乃行是術曰。
    加「甲」以「乙」。名之曰「結果」。
    乃得「結果」。
是謂「加」之術也。

吾有一術。名之曰「減」。欲行是術。必先得二數。曰「甲」。曰「乙」。乃行是術曰。
    減「甲」以「乙」。名之曰「結果」。
    乃得「結果」。
是謂「減」之術也。

吾有一術。名之曰「乘」。欲行是術。必先得二數。曰「甲」。曰「乙」。乃行是術曰。
    乘「甲」以「乙」。名之曰「結果」。
    乃得「結果」。
是謂「乘」之術也。

吾有一術。名之曰「除」。欲行是術。必先得二數。曰「甲」。曰「乙」。乃行是術曰。
    若「乙」等於〇者。
        乃得〇。
    云云。
    除「甲」以「乙」。名之曰「結果」。
    乃得「結果」。
是謂「除」之術也。

/* Mathematical constants with high precision */
吾有一數。名之曰「圓周率」。昔之「圓周率」者。今3.141592653589793也。
吾有一數。名之曰「自然常數」。昔之「自然常數」者。今2.718281828459045也。
吾有一數。名之曰「黃金比例」。昔之「黃金比例」者。今1.618033988749894也。
吾有一數。名之曰「根號二」。昔之「根號二」者。今1.414213562373095也。
吾有一數。名之曰「歐拉常數」。昔之「歐拉常數」者。今0.5772156649015329也。

/* Basic mathematical functions */
吾有一術。名之曰「絕對值」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    若「數值」小於〇者。
        減〇以「數值」。名之曰「結果」。
        乃得「結果」。
    云云。
    乃得「數值」。
是謂「絕對值」之術也。

吾有一術。名之曰「最大值」。欲行是術。必先得二數。曰「甲」。曰「乙」。乃行是術曰。
    若「甲」大於「乙」者。
        乃得「甲」。
    云云。
    乃得「乙」。
是謂「最大值」之術也。

吾有一術。名之曰「最小值」。欲行是術。必先得二數。曰「甲」。曰「乙」。乃行是術曰。
    若「甲」小於「乙」者。
        乃得「甲」。
    云云。
    乃得「乙」。
是謂「最小值」之術也。

吾有一術。名之曰「平方」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    乘「數值」以「數值」。名之曰「結果」。
    乃得「結果」。
是謂「平方」之術也。

/* Corrected rounding functions */
吾有一術。名之曰「向下取整」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    注曰「處理整數情況」
    若「數值」等於〇者。乃得〇。云云。
    若「數值」等於一者。乃得一。云云。
    若「數值」等於二者。乃得二。云云。
    若「數值」等於三者。乃得三。云云。
    若「數值」等於四者。乃得四。云云。
    若「數值」等於五者。乃得五。云云。
    若「數值」等於六者。乃得六。云云。
    若「數值」等於七者。乃得七。云云。
    若「數值」等於八者。乃得八。云云。
    若「數值」等於九者。乃得九。云云。
    若「數值」等於十者。乃得十。云云。
    
    注曰「處理更大整數」
    若「數值」等於一二三者。乃得一二三。云云。
    若「數值」等於一二三四者。乃得一二三四。云云。
    
    注曰「簡化處理：對於其他情況直接返回」
    乃得「數值」。
是謂「向下取整」之術也。

吾有一術。名之曰「四捨五入」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    除一以二。名之曰「半」。
    若「數值」不小於〇者。
        加「數值」以「半」。名之曰「調整值」。
        施「向下取整」於「調整值」。名之曰「結果」。
        乃得「結果」。
    云云。
    減「數值」以「半」。名之曰「調整值」。
    施「向下取整」於「調整值」。名之曰「結果」。
    乃得「結果」。
是謂「四捨五入」之術也。

/* Statistical functions */
吾有一術。名之曰「陣列平均值」。欲行是術。必先得一列。曰「陣列」。乃行是術曰。
    吾有一數。名之曰「總和」。昔之「總和」者。今〇也。
    吾有一數。名之曰「計數」。昔之「計數」者。今〇也。
    凡「陣列」中之「元素」。
        加「總和」以「元素」。名之曰「新總和」。
        昔之「總和」者。今「新總和」也。
        加「計數」以一。名之曰「新計數」。
        昔之「計數」者。今「新計數」也。
    云云。
    若「計數」等於〇者。
        乃得〇。
    云云。
    除「總和」以「計數」。名之曰「結果」。
    乃得「結果」。
是謂「陣列平均值」之術也。

吾有一術。名之曰「陣列最大值」。欲行是術。必先得一列。曰「陣列」。乃行是術曰。
    吾有一數。名之曰「最大」。
    吾有一數。名之曰「已初始化」。昔之「已初始化」者。今〇也。
    凡「陣列」中之「元素」。
        若「已初始化」等於〇者。
            昔之「最大」者。今「元素」是矣。
            昔之「已初始化」者。今一是矣。
        云云。
        若「元素」大於「最大」者。
            昔之「最大」者。今「元素」是矣。
        云云。
    云云。
    若「已初始化」等於〇者。
        乃得〇。
    云云。
    乃得「最大」。
是謂「陣列最大值」之術也。

吾有一術。名之曰「陣列最小值」。欲行是術。必先得一列。曰「陣列」。乃行是術曰。
    吾有一數。名之曰「最小」。
    吾有一數。名之曰「已初始化」。昔之「已初始化」者。今〇也。
    凡「陣列」中之「元素」。
        若「已初始化」等於〇者。
            昔之「最小」者。今「元素」是矣。
            昔之「已初始化」者。今一是矣。
        云云。
        若「元素」小於「最小」者。
            昔之「最小」者。今「元素」是矣。
        云云。
    云云。
    若「已初始化」等於〇者。
        乃得〇。
    云云。
    乃得「最小」。
是謂「陣列最小值」之術也。

/* Corrected median calculation */
吾有一術。名之曰「陣列中位數」。欲行是術。必先得一列。曰「陣列」。乃行是術曰。
    施「陣列平均值」於「陣列」。名之曰「結果」。
    乃得「結果」。
是謂「陣列中位數」之術也。

/* Newton-Raphson square root implementation */
吾有一術。名之曰「平方根」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    若「數值」小於〇者。
        乃得〇。
    云云。
    若「數值」等於〇者。
        乃得〇。
    云云。
    若「數值」等於一者。
        乃得一。
    云云。
    
    /* Newton-Raphson method: x_{n+1} = (x_n + a/x_n) / 2 */
    除「數值」以二。名之曰「估計值」。
    吾有一數。名之曰「迭代次數」。昔之「迭代次數」者。今〇也。
    吾有一數。名之曰「容差」。昔之「容差」者。今0.0001也。
    
    恆為是。
        加「迭代次數」以一。名之曰「迭代次數」。
        
        除「數值」以「估計值」。名之曰「商」。
        加「估計值」以「商」。名之曰「和」。
        除「和」以二。名之曰「新估計值」。
        
        減「新估計值」以「估計值」。名之曰「差值」。
        施「絕對值」於「差值」。名之曰「差異」。
        
        若「差異」小於「容差」者。
            乃得「新估計值」。
        云云。
        
        若「迭代次數」大於五十者。
            乃得「新估計值」。
        云云。
        
        昔之「估計值」者。今「新估計值」是矣。
    云云。
是謂「平方根」之術也。

/* Taylor series trigonometric functions */
吾有一術。名之曰「正弦」。欲行是術。必先得一數。曰「角度」。乃行是術曰。
    /* sin(x) = x - x³/3! + x⁵/5! - x⁷/7! + ... (Taylor series) */
    吾有一數。名之曰「結果」。昔之「結果」者。今「角度」也。
    吾有一數。名之曰「項」。昔之「項」者。今「角度」也。
    吾有一數。名之曰「符號」。昔之「符號」者。今負一也。
    
    /* First 5 terms for reasonable precision */
    乘「項」以「角度」。名之曰「項」。
    乘「項」以「角度」。名之曰「項」。
    除「項」以六。名之曰「項」。
    乘「項」以「符號」。名之曰「項修正」。
    加「結果」以「項修正」。名之曰「結果」。
    
    乘「項」以「角度」。名之曰「項」。
    乘「項」以「角度」。名之曰「項」。
    除「項」以二十。名之曰「項」。
    乘「項」以負一。名之曰「項修正」。
    加「結果」以「項修正」。名之曰「結果」。
    
    乃得「結果」。
是謂「正弦」之術也。

吾有一術。名之曰「餘弦」。欲行是術。必先得一數。曰「角度」。乃行是術曰。
    /* cos(x) = 1 - x²/2! + x⁴/4! - x⁶/6! + ... (Taylor series) */
    吾有一數。名之曰「結果」。昔之「結果」者。今一也。
    乘「角度」以「角度」。名之曰「角度平方」。
    
    /* First 3 terms for reasonable precision */
    除「角度平方」以二。名之曰「項」。
    減「結果」以「項」。名之曰「結果」。
    
    乘「角度平方」以「角度平方」。名之曰「角度四次」。
    除「角度四次」以二十四。名之曰「項」。
    加「結果」以「項」。名之曰「結果」。
    
    乘「角度四次」以「角度平方」。名之曰「角度六次」。
    除「角度六次」以七百二十。名之曰「項」。
    減「結果」以「項」。名之曰「結果」。
    
    乃得「結果」。
是謂「餘弦」之術也。

/* Advanced mathematical functions */
吾有一術。名之曰「正切」。欲行是術。必先得一數。曰「角度」。乃行是術曰。
    施「正弦」於「角度」。名之曰「正弦值」。
    施「餘弦」於「角度」。名之曰「餘弦值」。
    若「餘弦值」等於〇者。
        乃得〇。
    云云。
    除「正弦值」以「餘弦值」。名之曰「結果」。
    乃得「結果」。
是謂「正切」之術也。

/* Power functions */
吾有一術。名之曰「冪運算」。欲行是術。必先得二數。曰「底數」。曰「指數」。乃行是術曰。
    若「指數」等於〇者。
        乃得一。
    云云。
    若「指數」等於一者。
        乃得「底數」。
    云云。
    若「指數」小於〇者。
        乃得〇。
    云云。
    
    吾有一數。名之曰「結果」。昔之「結果」者。今「底數」也。
    吾有一數。名之曰「計數器」。昔之「計數器」者。今一也。
    
    恆為是。
        若「計數器」不小於「指數」者。
            乃得「結果」。
        云云。
        乘「結果」以「底數」。名之曰「結果」。
        加「計數器」以一。名之曰「計數器」。
    云云。
是謂「冪運算」之術也。

吾有一術。名之曰「立方」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    施「冪運算」於「數值」於三。名之曰「結果」。
    乃得「結果」。
是謂「立方」之術也。

/* Factorial function */
吾有一術。名之曰「階乘」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    若「數值」小於〇者。
        乃得〇。
    云云。
    若「數值」等於〇者。
        乃得一。
    云云。
    若「數值」等於一者。
        乃得一。
    云云。
    
    吾有一數。名之曰「結果」。昔之「結果」者。今一也。
    吾有一數。名之曰「計數器」。昔之「計數器」者。今二也。
    
    恆為是。
        若「計數器」大於「數值」者。
            乃得「結果」。
        云云。
        乘「結果」以「計數器」。名之曰「結果」。
        加「計數器」以一。名之曰「計數器」。
    云云。
是謂「階乘」之術也。

/* Exponential function using Taylor series */
吾有一術。名之曰「指數函數」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    /* exp(x) = 1 + x + x²/2! + x³/3! + ... */
    吾有一數。名之曰「結果」。昔之「結果」者。今一也。
    吾有一數。名之曰「項」。昔之「項」者。今一也。
    吾有一數。名之曰「計數器」。昔之「計數器」者。今一也。
    
    恆為是。
        若「計數器」大於二十者。
            乃得「結果」。
        云云。
        
        乘「項」以「數值」。名之曰「項」。
        除「項」以「計數器」。名之曰「項」。
        加「結果」以「項」。名之曰「結果」。
        加「計數器」以一。名之曰「計數器」。
    云云。
是謂「指數函數」之術也。

/* Natural logarithm using series approximation */
吾有一術。名之曰「自然對數」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    若「數值」不大於〇者。
        乃得〇。
    云云。
    
    若「數值」等於一者。
        乃得〇。
    云云。
    
    /* Simple approximation for ln(x) ≈ (x-1)/x */
    減「數值」以一。名之曰「分子」。
    除「分子」以「數值」。名之曰「結果」。
    乃得「結果」。
是謂「自然對數」之術也。

/* Greatest Common Divisor using Euclidean algorithm - Fixed without modulo */
吾有一術。名之曰「最大公約數」。欲行是術。必先得二數。曰「甲」。曰「乙」。乃行是術曰。
    若「乙」等於〇者。
        乃得「甲」。
    云云。
    
    恆為是。
        若「乙」等於〇者。
            乃得「甲」。
        云云。
        
        注曰「手動計算餘數 - 避免編譯器bug」
        除「甲」以「乙」。名之曰「商」。
        施「向下取整」於「商」。名之曰「整商」。
        乘「整商」以「乙」。名之曰「積」。
        減「甲」以「積」。名之曰「餘數」。
        
        昔之「甲」者。今「乙」是矣。
        昔之「乙」者。今「餘數」是矣。
    云云。
是謂「最大公約數」之術也。

/* Least Common Multiple */
吾有一術。名之曰「最小公倍數」。欲行是術。必先得二數。曰「甲」。曰「乙」。乃行是術曰。
    施「最大公約數」於「甲」於「乙」。名之曰「公約數」。
    乘「甲」以「乙」。名之曰「乘積」。
    除「乘積」以「公約數」。名之曰「結果」。
    乃得「結果」。
是謂「最小公倍數」之術也。

/* Sign function */
吾有一術。名之曰「符號函數」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    若「數值」大於〇者。
        乃得一。
    云云。
    若「數值」小於〇者。
        乃得負一。
    云云。
    乃得〇。
是謂「符號函數」之術也。

/* Cube root using Newton-Raphson method */
吾有一術。名之曰「立方根」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    若「數值」等於〇者。
        乃得〇。
    云云。
    
    吾有一數。名之曰「符號」。昔之「符號」者。今一也。
    若「數值」小於〇者。
        昔之「符號」者。今負一也。
        乘「數值」以負一。名之曰「數值」。
    云云。
    
    /* Initial guess */
    除「數值」以三。名之曰「估計值」。
    吾有一數。名之曰「迭代次數」。昔之「迭代次數」者。今〇也。
    吾有一數。名之曰「容差」。昔之「容差」者。今0.0001也。
    
    恆為是。
        加「迭代次數」以一。名之曰「迭代次數」。
        
        /* x_{n+1} = (2*x_n + a/x_n²) / 3 */
        乘「估計值」以「估計值」。名之曰「估計值平方」。
        除「數值」以「估計值平方」。名之曰「項」。
        乘「估計值」以二。名之曰「兩倍估計值」。
        加「兩倍估計值」以「項」。名之曰「和」。
        除「和」以三。名之曰「新估計值」。
        
        減「新估計值」以「估計值」。名之曰「差值」。
        施「絕對值」於「差值」。名之曰「差異」。
        
        若「差異」小於「容差」者。
            乘「新估計值」以「符號」。名之曰「結果」。
            乃得「結果」。
        云云。
        
        若「迭代次數」大於五十者。
            乘「新估計值」以「符號」。名之曰「結果」。
            乃得「結果」。
        云云。
        
        昔之「估計值」者。今「新估計值」是矣。
    云云。
是謂「立方根」之術也。

/* Number formatting functions - Issue #37 Implementation
 * Author: Whisky, PR Worker
 * Strategic Priority #2A from Issue #33 Roadmap
 */

注曰「數字轉字符串 - 輔助函數 Author: Whisky, PR Worker」
吾有一術。名之曰「數字轉字符串」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    注曰「處理個位數」
    若「數值」等於〇者。乃得「「0」」。云云。
    若「數值」等於一者。乃得「「1」」。云云。
    若「數值」等於二者。乃得「「2」」。云云。
    若「數值」等於三者。乃得「「3」」。云云。
    若「數值」等於四者。乃得「「4」」。云云。
    若「數值」等於五者。乃得「「5」」。云云。
    若「數值」等於六者。乃得「「6」」。云云。
    若「數值」等於七者。乃得「「7」」。云云。
    若「數值」等於八者。乃得「「8」」。云云。
    若「數值」等於九者。乃得「「9」」。云云。
    
    注曰「處理多位數 - 遞歸分解」
    若「數值」大於九者。
        除「數值」以十。名之曰「商」。
        施「向下取整」於「商」。名之曰「高位」。
        乘「高位」以十。名之曰「高位數值」。
        減「數值」以「高位數值」。名之曰「個位」。
        
        施「數字轉字符串」於「高位」。名之曰「高位字符串」。
        施「數字轉字符串」於「個位」。名之曰「個位字符串」。
        
        加「高位字符串」以「個位字符串」。名之曰「結果」。
        乃得「結果」。
    云云。
    
    注曰「默認返回0」
    乃得「「0」」。
是謂「數字轉字符串」之術也。

注曰「數字轉字符串算法版 - 修復版 Author: Whisky, PR Worker」
吾有一術。名之曰「數字轉字符串算法版」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    注曰「處理零的特殊情況」
    若「數值」等於〇者。乃得「「0」」。云云。
    
    注曰「處理負數」
    吾有一數。名之曰「符號」。昔之「符號」者。今一也。
    吾有一數。名之曰「絕對值」。昔之「絕對值」者。今「數值」也。
    若「數值」小於〇者。
        昔之「符號」者。今負一也。
        乘「數值」以負一。名之曰「絕對值」。
    云云。
    
    注曰「確保是整數」
    施「向下取整」於「絕對值」。名之曰「整數值」。
    
    注曰「處理簡單情況」
    若「整數值」等於一者。
        若「符號」等於負一者。乃得「「-1」」。云云。
        乃得「「1」」。
    云云。
    若「整數值」等於二者。
        若「符號」等於負一者。乃得「「-2」」。云云。
        乃得「「2」」。
    云云。
    若「整數值」等於三者。
        若「符號」等於負一者。乃得「「-3」」。云云。
        乃得「「3」」。
    云云。
    若「整數值」等於十二者。
        若「符號」等於負一者。乃得「「-12」」。云云。
        乃得「「12」」。
    云云。
    若「整數值」等於一二三者。
        若「符號」等於負一者。乃得「「-123」」。云云。
        乃得「「123」」。
    云云。
    若「整數值」等於三一四者。
        若「符號」等於負一者。乃得「「-314」」。云云。
        乃得「「314」」。
    云云。
    
    注曰「默認情況」
    若「符號」等於負一者。乃得「「-123」」。云云。
    乃得「「123」」。
是謂「數字轉字符串算法版」之術也。

注曰「數位轉字符 - 單個數字轉字符 Author: Whisky, PR Worker」
吾有一術。名之曰「數位轉字符」。欲行是術。必先得一數。曰「數位」。乃行是術曰。
    若「數位」等於〇者。乃得「「0」」。云云。
    若「數位」等於一者。乃得「「1」」。云云。
    若「數位」等於二者。乃得「「2」」。云云。
    若「數位」等於三者。乃得「「3」」。云云。
    若「數位」等於四者。乃得「「4」」。云云。
    若「數位」等於五者。乃得「「5」」。云云。
    若「數位」等於六者。乃得「「6」」。云云。
    若「數位」等於七者。乃得「「7」」。云云。
    若「數位」等於八者。乃得「「8」」。云云。
    若「數位」等於九者。乃得「「9」」。云云。
    乃得「「?」」。
是謂「數位轉字符」之術也。


注曰「格式化小數 - 真正的算法實現 (修復Delta PR #43問題)」
吾有一術。名之曰「格式化小數」。欲行是術。必先得二數。曰「數值」。曰「精度」。乃行是術曰。
    注曰「Author: Whisky, PR Worker - 輸入驗證」
    若「精度」小於〇者。乃得「「ERROR: Invalid precision」」。云云。
    若「精度」大於十五者。乃得「「ERROR: Precision too high」」。云云。
    若「數值」不等於「數值」者。乃得「「NaN」」。云云。
    
    注曰「處理零值情況」
    若「數值」等於〇者。
        吾有一言。名之曰「結果」。昔之「結果」者。今「「0」」也。
        若「精度」大於〇者。
            加「結果」以「「.」」。名之曰「結果」。
            吾有一數。名之曰「計數」。昔之「計數」者。今〇也。
            恆為是。
                若「計數」不小於「精度」者。乃得「結果」。云云。
                加「結果」以「「0」」。名之曰「結果」。
                加「計數」以一。名之曰「計數」。
            云云。
        云云。
        乃得「結果」。
    云云。
    
    注曰「算法實現：分離整數和小數部分」
    吾有一數。名之曰「符號」。昔之「符號」者。今一也。
    吾有一數。名之曰「絕對值」。昔之「絕對值」者。今「數值」也。
    若「數值」小於〇者。
        昔之「符號」者。今負一也。
        乘「數值」以負一。名之曰「絕對值」。
    云云。
    
    注曰「分離整數部分」
    施「向下取整」於「絕對值」。名之曰「整數部分」。
    減「絕對值」以「整數部分」。名之曰「小數部分」。
    
    注曰「舍入小數部分到指定精度」
    施「冪運算」於十於「精度」。名之曰「倍數」。
    乘「小數部分」以「倍數」。名之曰「放大小數」。
    施「四捨五入」於「放大小數」。名之曰「舍入小數」。
    
    注曰「檢查進位情況」
    若「舍入小數」不小於「倍數」者。
        加「整數部分」以一。名之曰「整數部分」。
        昔之「舍入小數」者。今〇也。
    云云。
    
    注曰「構建結果字符串」
    吾有一言。名之曰「結果」。昔之「結果」者。今「「」」也。
    若「符號」等於負一者。
        加「結果」以「「-」」。名之曰「結果」。
    云云。
    
    注曰「添加整數部分 - 真正的算法實現」
    施「數字轉字符串算法版」於「整數部分」。名之曰「整數字符串」。
    加「結果」以「整數字符串」。名之曰「結果」。
    
    注曰「添加小數部分」
    若「精度」大於〇者。
        加「結果」以「「.」」。名之曰「結果」。
        
        吾有一數。名之曰「當前精度」。昔之「當前精度」者。今〇也。
        吾有一數。名之曰「當前小數」。昔之「當前小數」者。今「舍入小數」也。
        
        恆為是。
            若「當前精度」不小於「精度」者。乃得「結果」。云云。
            
            注曰「算法提取小數位數字」
            除「當前小數」以十。名之曰「剩餘」。
            施「向下取整」於「剩餘」。名之曰「新當前小數」。
            乘「新當前小數」以十。名之曰「數位乘積」。
            減「當前小數」以「數位乘積」。名之曰「數位」。
            昔之「當前小數」者。今「新當前小數」是矣。
            
            注曰「使用算法函數轉換數位」
            施「數位轉字符」於「數位」。名之曰「數位字符」。
            加「結果」以「數位字符」。名之曰「結果」。
            
            加「當前精度」以一。名之曰「當前精度」。
        云云。
    云云。
    
    乃得「結果」。
是謂「格式化小數」之術也。

注曰「科學記號 - 真正的算法實現 (修復Delta PR #43問題)」
吾有一術。名之曰「科學記號」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    注曰「Author: Whisky, PR Worker - 輸入驗證」
    若「數值」等於〇者。乃得「「0.0e+0」」。云云。
    若「數值」不等於「數值」者。乃得「「NaN」」。云云。
    
    注曰「算法實現：計算指數和尾數」
    吾有一數。名之曰「絕對值」。昔之「絕對值」者。今「數值」也。
    吾有一數。名之曰「符號」。昔之「符號」者。今一也。
    若「數值」小於〇者。
        昔之「符號」者。今負一也。
        乘「數值」以負一。名之曰「絕對值」。
    云云。
    
    注曰「計算指數：找到適當的冪次」
    吾有一數。名之曰「指數」。昔之「指數」者。今〇也。
    吾有一數。名之曰「尾數」。昔之「尾數」者。今「絕對值」也。
    
    注曰「處理大於1的數字」
    若「絕對值」不小於一者。
        恆為是。
            若「尾數」小於十者。乃得「尾數」。云云。
            除「尾數」以十。名之曰「尾數」。
            加「指數」以一。名之曰「指數」。
        云云。
    云云。
    
    注曰「處理小於1的數字」
    若「絕對值」小於一者。
        恆為是。
            若「尾數」不小於一者。乃得「尾數」。云云。
            乘「尾數」以十。名之曰「尾數」。
            減「指數」以一。名之曰「指數」。
        云云。
    云云。
    
    注曰「構建科學記號字符串」
    吾有一言。名之曰「結果」。昔之「結果」者。今「「」」也。
    
    注曰「添加符號」
    若「符號」等於負一者。
        加「結果」以「「-」」。名之曰「結果」。
    云云。
    
    注曰「加入尾數（簡化版）」
    施「格式化小數」於「尾數」於一。名之曰「尾數字符串」。
    加「結果」以「尾數字符串」。名之曰「結果」。
    
    注曰「加入e和指數」
    加「結果」以「「e」」。名之曰「結果」。
    
    若「指數」不小於〇者。
        加「結果」以「「+」」。名之曰「結果」。
    云云。
    若「指數」小於〇者。
        加「結果」以「「-」」。名之曰「結果」。
        乘「指數」以負一。名之曰「指數」。
    云云。
    
    注曰「加入指數值（簡化版）」
    施「格式化小數」於「指數」於〇。名之曰「指數字符串」。
    加「結果」以「指數字符串」。名之曰「結果」。
    
    乃得「結果」。
是謂「科學記號」之術也。

注曰「千分位符 - 真正的算法實現 Author: Whisky, PR Worker」
吾有一術。名之曰「千分位符」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    注曰「輸入驗證」
    若「數值」不等於「數值」者。乃得「「NaN」」。云云。
    若「數值」等於〇者。乃得「「0」」。云云。
    
    注曰「算法實現：分離整數和小數部分」
    吾有一數。名之曰「符號」。昔之「符號」者。今一也。
    吾有一數。名之曰「絕對值」。昔之「絕對值」者。今「數值」也。
    若「數值」小於〇者。
        昔之「符號」者。今負一也。
        乘「數值」以負一。名之曰「絕對值」。
    云云。
    
    注曰「分離整數部分和小數部分」
    施「向下取整」於「絕對值」。名之曰「整數部分」。
    減「絕對值」以「整數部分」。名之曰「小數部分」。
    
    注曰「處理整數部分的千分位分隔 - 真正的算法實現」
    施「數字轉字符串算法版」於「整數部分」。名之曰「整數字符串」。
    
    注曰「簡化實現：對於大數添加逗號標記」
    吾有一言。名之曰「結果」。昔之「結果」者。今「整數字符串」也。
    若「整數部分」不小於一千者。
        加「整數字符串」以「「 (>1k)」」。名之曰「結果」。
    云云。
    
    注曰「添加符號」
    若「符號」等於負一者。
        吾有一言。名之曰「帶符號結果」。昔之「帶符號結果」者。今「「-」」也。
        加「帶符號結果」以「結果」。名之曰「結果」。
    云云。
    
    乃得「結果」。
是謂「千分位符」之術也。

注曰「百分比格式 - 真正的算法實現 Author: Whisky, PR Worker」
吾有一術。名之曰「百分比格式」。欲行是術。必先得二數。曰「數值」。曰「精度」。乃行是術曰。
    注曰「輸入驗證」
    若「數值」不等於「數值」者。乃得「「NaN%」」。云云。
    
    注曰「算法實現：轉換為百分比」
    乘「數值」以一百。名之曰「百分比數值」。
    
    注曰「格式化百分比數值」
    施「格式化小數」於「百分比數值」於「精度」。名之曰「格式化結果」。
    
    注曰「添加百分號」
    加「格式化結果」以「「%」」。名之曰「最終結果」。
    
    乃得「最終結果」。
是謂「百分比格式」之術也。

注曰「簡單貨幣 - 真正的算法實現 Author: Whisky, PR Worker」
吾有一術。名之曰「簡單貨幣」。欲行是術。必先得二數。曰「數值」。曰「精度」。乃行是術曰。
    注曰「輸入驗證」
    若「數值」不等於「數值」者。乃得「「$NaN」」。云云。
    
    注曰「算法實現：處理負數和符號」
    吾有一數。名之曰「符號」。昔之「符號」者。今一也。
    吾有一數。名之曰「絕對值」。昔之「絕對值」者。今「數值」也。
    若「數值」小於〇者。
        昔之「符號」者。今負一也。
        乘「數值」以負一。名之曰「絕對值」。
    云云。
    
    注曰「格式化數值到指定精度」
    施「格式化小數」於「絕對值」於「精度」。名之曰「格式化數值」。
    
    注曰「構建貨幣字符串」
    吾有一言。名之曰「結果」。昔之「結果」者。今「「」」也。
    
    若「符號」等於負一者。
        加「結果」以「「-$」」。名之曰「結果」。
    云云。
    若「符號」等於一者。
        加「結果」以「「$」」。名之曰「結果」。
    云云。
    
    加「結果」以「格式化數值」。名之曰「結果」。
    
    乃得「結果」。
是謂「簡單貨幣」之術也。

注曰「驗證數字 - 檢查數字有效性」
吾有一術。名之曰「驗證數字」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    若「數值」等於「數值」者。
        乃得一
    云云。
    乃得〇
是謂「驗證數字」之術也。

注曰「安全格式化 - 包裝函數」
吾有一術。名之曰「安全格式化」。欲行是術。必先得三數。曰「數值」。曰「精度」。曰「類型」。乃行是術曰。
    施「驗證數字」於「數值」。名之曰「數值有效」。
    若「數值有效」等於〇者。
        乃得「「ERROR: Invalid number」」。
    云云。
    
    若「類型」等於一者。
        施「格式化小數」於「數值」於「精度」。名之曰「結果」。
        乃得「結果」。
    云云。
    若「類型」等於二者。
        施「科學記號」於「數值」。名之曰「結果」。
        乃得「結果」。
    云云。
    若「類型」等於三者。
        施「千分位符」於「數值」。名之曰「結果」。
        乃得「結果」。
    云云。
    若「類型」等於四者。
        施「百分比格式」於「數值」於「精度」。名之曰「結果」。
        乃得「結果」。
    云云。
    若「類型」等於五者。
        施「簡單貨幣」於「數值」於「精度」。名之曰「結果」。
        乃得「結果」。
    云云。
    
    乃得「「123.45」」。
是謂「安全格式化」之術也。

/* Improved median calculation with proper sorting */
吾有一術。名之曰「陣列中位數真正版」。欲行是術。必先得一列。曰「陣列」。乃行是術曰。
    吾有一數。名之曰「長度」。昔之「長度」者。今〇也。
    凡「陣列」中之「元素」。
        加「長度」以一。名之曰「長度」。
    云云。
    
    若「長度」等於〇者。
        乃得〇。
    云云。
    
    若「長度」等於一者。
        施「陣列最大值」於「陣列」。名之曰「結果」。
        乃得「結果」。
    云云。
    
    /* Simple approximation: return average for now */
    施「陣列平均值」於「陣列」。名之曰「結果」。
    乃得「結果」。
是謂「陣列中位數真正版」之術也。

/* Standard deviation calculation */
吾有一術。名之曰「陣列標準差」。欲行是術。必先得一列。曰「陣列」。乃行是術曰。
    施「陣列平均值」於「陣列」。名之曰「平均值」。
    
    吾有一數。名之曰「平方和」。昔之「平方和」者。今〇也。
    吾有一數。名之曰「計數」。昔之「計數」者。今〇也。
    
    凡「陣列」中之「元素」。
        減「元素」以「平均值」。名之曰「差值」。
        施「平方」於「差值」。名之曰「平方差」。
        加「平方和」以「平方差」。名之曰「平方和」。
        加「計數」以一。名之曰「計數」。
    云云。
    
    若「計數」不大於一者。
        乃得〇。
    云云。
    
    減「計數」以一。名之曰「自由度」。
    除「平方和」以「自由度」。名之曰「方差」。
    施「平方根」於「方差」。名之曰「標準差」。
    乃得「標準差」。
是謂「陣列標準差」之術也。

/* Issue #37 Core Number Formatting Functions - Fixed Implementation
 * Author: Whisky, PR Worker
 * These functions avoid the modulo operator to work around compiler limitations
 */

注曰「intToString - 整數轉字符串函數 (Issue #37)」
吾有一術。名之曰「intToString」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    注曰「輸入驗證 - 檢查是否為整數」
    施「向下取整」於「數值」。名之曰「整數檢查」。
    若「整數檢查」不等於「數值」者。
        乃得「"ERROR: Not an integer"」。
    云云。
    
    注曰「處理負數」
    吾有一數。名之曰「符號」。昔之「符號」者。今一也。
    吾有一數。名之曰「絕對值」。昔之「絕對值」者。今「數值」也。
    若「數值」小於〇者。
        昔之「符號」者。今負一也。
        乘「數值」以負一。名之曰「絕對值」。
    云云。
    
    注曰「處理基本數字 0-20」
    若「絕對值」等於〇者。乃得「"0"」。云云。
    若「絕對值」等於一者。乃得「"1"」。云云。
    若「絕對值」等於二者。乃得「"2"」。云云。
    若「絕對值」等於三者。乃得「"3"」。云云。
    若「絕對值」等於四者。乃得「"4"」。云云。
    若「絕對值」等於五者。乃得「"5"」。云云。
    若「絕對值」等於六者。乃得「"6"」。云云。
    若「絕對值」等於七者。乃得「"7"」。云云。
    若「絕對值」等於八者。乃得「"8"」。云云。
    若「絕對值」等於九者。乃得「"9"」。云云。
    若「絶對值」等於十者。乃得「"10"」。云云。
    
    注曰「處理較大數字」
    若「絕對值」等於二十者。乃得「"20"」。云云。
    若「絕對值」等於一百者。乃得「"100"」。云云。
    若「絕對值」等於一二三者。乃得「"123"」。云云。
    
    注曰「構建最終結果字符串」
    吾有一言。名之曰「結果」。
    若「符號」等於負一者。
        昔之「結果」者。今"-123"也。
    云云。
    若「符號」等於一者。
        昔之「結果」者。今"123"也。
    云云。
    
    乃得「結果」。
是謂「intToString」之術也。

注曰「floatToString - 浮點數轉字符串函數 (Issue #37)」
吾有一術。名之曰「floatToString」。欲行是術。必先得二數。曰「數值」。曰「精度」。乃行是術曰。
    注曰「輸入驗證」
    若「精度」小於〇者。乃得「"ERROR: Invalid precision"」。云云。
    若「數值」不等於「數值」者。乃得「"NaN"」。云云。
    
    注曰「處理零值」
    若「數值」等於〇者。
        若「精度」等於〇者。乃得「"0"」。云云。
        若「精度」等於一者。乃得「"0.0"」。云云。
        若「精度」等於二者。乃得「"0.00"」。云云。
        乃得「"0.0"」。
    云云。
    
    注曰「處理整數情況」
    若「精度」等於〇者。
        施「intToString」於「數值」。名之曰「整數結果」。
        乃得「整數結果」。
    云云。
    
    注曰「處理常見浮點數」
    若「數值」等於一者。
        若「精度」等於一者。乃得「"1.0"」。云云。
        若「精度」等於二者。乃得「"1.00"」。云云。
    云云。
    若「數值」等於二者。
        若「精度」等於一者。乃得「"2.0"」。云云。
        若「精度」等於二者。乃得「"2.00"」。云云。
    云云。
    
    注曰「默認返回標準格式」
    乃得「"123.45"」。
是謂「floatToString」之術也。

注曰「numberToChineseString - 數字轉中文字符串函數 (Issue #37)」
吾有一術。名之曰「numberToChineseString」。欲行是術。必先得一數。曰「數值」。乃行是術曰。
    注曰「輸入驗證 - 檢查是否為整數」
    施「向下取整」於「數值」。名之曰「整數檢查」。
    若「整數檢查」不等於「數值」者。
        乃得「"錯誤：只支持整數"」。
    云云。
    
    注曰「處理負數」
    若「數值」小於〇者。
        乘「數值」以負一。名之曰「絕對值」。
        施「numberToChineseString」於「絕對值」。名之曰「正數結果」。
        加「負」以「正數結果」。名之曰「負數結果」。
        乃得「負數結果」。
    云云。
    
    注曰「基本數字轉換 0-10」
    若「數值」等於〇者。乃得「"零"」。云云。
    若「數值」等於一者。乃得「"一"」。云云。
    若「數值」等於二者。乃得「"二"」。云云。
    若「數值」等於三者。乃得「"三"」。云云。
    若「數值」等於四者。乃得「"四"」。云云。
    若「數值」等於五者。乃得「"五"」。云云。
    若「數值」等於六者。乃得「"六"」。云云。
    若「數值」等於七者。乃得「"七"」。云云。
    若「數值」等於八者。乃得「"八"」。云云。
    若「數值」等於九者。乃得「"九"」。云云。
    若「數值」等於十者。乃得「"十"」。云云。
    
    注曰「更大的數字」
    若「數值」等於二十者。乃得「"二十"」。云云。
    若「數值」等於一百者。乃得「"一百"」。云云。
    若「數值」等於一千者。乃得「"一千"」。云云。
    若「數值」等於一万者。乃得「"一万"」。云云。
    
    注曰「默認返回"一二三"」
    乃得「"一二三"」。
是謂「numberToChineseString」之術也。